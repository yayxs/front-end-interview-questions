(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{445:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"手写实现-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写实现-promise"}},[t._v("#")]),t._v(" 手写实现 Promise")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Promise 构造函数是同步还是异步执行，then 中的方法呢 ?promise 如何实现 then 处理 ?")])]),t._v(" "),a("p",[t._v("大家都在说"),a("code",[t._v("promise")]),t._v(" ，面试的时候也基本是必问的问题，一般知识点的话，一些网上的参考文章是不会过时的，比如像一些配置性的文章大家可能喜欢看最近的文章。我们将从"),a("strong",[t._v("基本概念")]),t._v(" "),a("strong",[t._v("原理")]),t._v(" "),a("strong",[t._v("面试")]),t._v(" 去看这些问题。首先要说的就是"),a("code",[t._v("promise")]),t._v(" .一般我们就是读文档，从简单到难。")]),t._v(" "),a("blockquote",[a("p",[t._v("Promise 是个对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("代表一个异步操作的最终完成或者失败")])]),t._v(" "),a("p",[t._v("假设现在我们需要这样一件事情："),a("strong",[t._v("创建一个音频文件，这就需要我们准备两个回调函数，一是成功的时候调用，二是失败的时候调用")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/yayxs/Pics/master/image-20200610213825567.png",alt:"image-20200610213825567"}})]),t._v(" "),a("p",[t._v("那这样我们就需要准备两个回调函数，有了"),a("code",[t._v("promise")]),t._v(" 之后，我们就可以这样")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAudioFileAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audioSettings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("successCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("promise A+ 规范")])]),t._v(" "),a("p",[t._v("关于"),a("code",[t._v("promise")]),t._v(" 一般会从三个角度出发")]),t._v(" "),a("ul",[a("li",[t._v("直接是概念")]),t._v(" "),a("li",[t._v("给一段代码输出")])]),t._v(" "),a("h1",{attrs:{id:"异步解决方案良药promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步解决方案良药promise"}},[t._v("#")]),t._v(" 异步解决方案良药Promise")]),t._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),a("p",[t._v("目前比较流行的异步解决方案，本质上是一个构造函数")]),t._v(" "),a("h3",{attrs:{id:"_1、状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、状态"}},[t._v("#")]),t._v(" 1、状态")]),t._v(" "),a("p",[t._v("promise有三种状态，初始的状态都是pedding，包括成功的状态失败的状态还有等待的状态")]),t._v(" "),a("ul",[a("li",[t._v("promise.all()所有的promise对象成功才会触发成功的状态，否则失败状态")]),t._v(" "),a("li",[t._v("promise.race()任意一个子promise的状态触发后")])]),t._v(" "),a("h3",{attrs:{id:"_2、出现的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、出现的原因"}},[t._v("#")]),t._v(" 2、出现的原因")]),t._v(" "),a("p",[t._v("我们来通过一个例子来说明一下异步调用的问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let url1 = 'http://xxx.xxx.1';\n$.ajax({\n    url:url1,\n    error:function (error) {},\n    success:function (data1) {\n        console.log(data1);\n    }\n});\n\n")])])]),a("p",[t._v("那当我们发出多个请求的时候就只能以嵌套的方式来解决")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let url1 = 'http://xxx.xxx.1';\nlet url2 = 'http://xxx.xxx.2';\nlet url3 = 'http://xxx.xxx.3';\n$.ajax({\n    url:url1,\n    error:function (error) {},\n    success:function (data1) {\n        console.log(data1);\n        $.ajax({\n            url:url2,\n            data:data1,\n            error:function (error) {},\n            success:function (data2) {\n                console.log(data2);\n                $.ajax({\n                    url:url3,\n                    data,\n                    error:function (error) {},\n                    success:function (data3) {\n                        console.log(data3);\n                    }\n                });\n            }\n        });\n    }\n});\n")])])]),a("h3",{attrs:{id:"_3、主要的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、主要的问题"}},[t._v("#")]),t._v(" 3、主要的问题")]),t._v(" "),a("ul",[a("li",[t._v("代码臃肿。")]),t._v(" "),a("li",[t._v("可读性差。")]),t._v(" "),a("li",[t._v("耦合度过高，可维护性差。")]),t._v(" "),a("li",[t._v("代码复用性差。")]),t._v(" "),a("li",[t._v("容易滋生 bug。")]),t._v(" "),a("li",[t._v("只能在回调里处理异常。")])]),t._v(" "),a("h3",{attrs:{id:"_4-、promise-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-、promise-的使用"}},[t._v("#")]),t._v(" 4 、Promise 的使用")]),t._v(" "),a("h3",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[t._v("Promise 是一个构造函数，使用 new 操作符返回一个 promise 对象")]),t._v(" "),a("p",[t._v("构造函数接收一个 excutor 函数作为参数")]),t._v(" "),a("p",[t._v("excutor 函数有两个函数类型的参数 resolve 和 reject")])])}),[],!1,null,null,null);s.default=r.exports}}]);