import{o as n,c as s,a}from"./app.0c83b2b0.js";const t='{"title":"深入理解JS数组","description":"","frontmatter":{"title":"深入理解JS数组"},"headers":[{"level":2,"title":"数组的含义","slug":"数组的含义"},{"level":2,"title":"数组的优点及特性","slug":"数组的优点及特性"},{"level":3,"title":"优点","slug":"优点"},{"level":3,"title":"特性","slug":"特性"},{"level":2,"title":"数组的构造器有哪几种","slug":"数组的构造器有哪几种"},{"level":2,"title":"数组是如何存储的","slug":"数组是如何存储的"},{"level":2,"title":"改变自身的方法","slug":"改变自身的方法"},{"level":2,"title":"数组中增加元素的方式","slug":"数组中增加元素的方式"},{"level":2,"title":"计算两个数组的交集","slug":"计算两个数组的交集"},{"level":2,"title":"类数组（伪数组）和数组的区别是什么？","slug":"类数组（伪数组）和数组的区别是什么？"},{"level":3,"title":"类（伪）数组（arraylike）","slug":"类（伪）数组（arraylike）"},{"level":2,"title":"判断一个变量是否为数组","slug":"判断一个变量是否为数组"},{"level":3,"title":"instanceof操作符","slug":"instanceof操作符"},{"level":3,"title":"Array.isArray","slug":"array-isarray"},{"level":2,"title":"Object.prototype.toString","slug":"object-prototype-tostring"},{"level":3,"title":"相关代码","slug":"相关代码"},{"level":2,"title":"数组里面有 10 万个数据，取第一个元素和第 10 万个元素的时间相差多少","slug":"数组里面有-10-万个数据，取第一个元素和第-10-万个元素的时间相差多少"},{"level":2,"title":"谈谈数组中的push方法","slug":"谈谈数组中的push方法"},{"level":3,"title":"数组中的length属性","slug":"数组中的length属性"},{"level":3,"title":"数组的push","slug":"数组的push"},{"level":3,"title":"\'splice\': Array.prototype.splice","slug":"splice-array-prototype-splice"}],"relativePath":"guide/javascript/array/README.md","lastUpdated":1615877423023}',p={},o=a('<h2 id="数组的含义"><a class="header-anchor" href="#数组的含义" aria-hidden="true">#</a> 数组的含义</h2><blockquote><p>数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储.它能存储有序的集合</p></blockquote><p><img src="https://raw.githubusercontent.com/yayxs/Pics/master/img/20200426202840.png" alt="20200426202840"></p><p><strong>以上是 js 数组在内存中大致位置</strong> ，或者</p><blockquote><p>Chrome 浏览器 JS 引擎 V8 中，数组有两种存储模式，一种是类似 C 语言中的线性结构存储（索引值连续，且都是正整数的情况下），一种是采用 Hash 结构存储（索引值为负数，数组稀疏，间隔比较大）</p></blockquote><p>为什么这么说，因为在<code>js</code> 中 数组的存储</p><div class="language-js"><pre><code><span class="token comment">// The JSArray describes JavaScript Arrays</span>\n<span class="token comment">//  Such an array can be in one of two modes:</span>\n<span class="token comment">//    - fast, backing storage is a FixedArray and length &lt;= elements.length();</span>\n<span class="token comment">// 存储结构是 FixedArray ，并且数组长度 &lt;= elements.length() ，push 或 pop 时可能会伴随着动态扩容或减容</span>\n\n<span class="token comment">//       Please note: push and pop can be used to grow and shrink the array.</span>\n<span class="token comment">//    - slow, backing storage is a HashTable with numbers as keys</span>\n<span class="token comment">// 存储结构是 HashTable（哈希表），并且数组下标作为 key</span>\n<span class="token keyword">class</span> <span class="token class-name">JSArray</span><span class="token operator">:</span> <span class="token keyword">public</span> JSObject <span class="token punctuation">{</span>\n <span class="token keyword">public</span><span class="token operator">:</span>\n  <span class="token comment">// [length]: The length property.</span>\n  <span class="token constant">DECL_ACCESSORS</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> Object<span class="token punctuation">)</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token comment">// Number of element slots to pre-allocate for an empty array.</span>\n  <span class="token keyword">static</span> <span class="token keyword">const</span> int kPreallocatedArrayElements <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>意思是说，我们可以看到 <code>JSArray</code> 是继承自 <code>JSObject</code> 的，所以在 JavaScript 中，数组可以是一个特殊的对象，内部也是以 key-value 形式存储数据，所以 JavaScript 中的数组可以存放不同类型的值。</p><blockquote><p>JavaScript 中， <code>JSArray</code> 继承自 <code>JSObject</code> ，或者说它就是一个特殊的对象，内部是以 key-value 形式存储数据，所以 JavaScript 中的数组可以存放不同类型的值。它有两种存储方式，快数组与慢数组，初始化空数组时，使用快数组，快数组使用连续的内存空间，当数组长度达到最大时，<code>JSArray</code> 会进行动态的扩容，以存储更多的元素，相对慢数组，性能要好得多。当数组中 <code>hole</code> 太多时，会转变成慢数组，即以哈希表的方式（ key-value 的形式）存储数据，以节省内存空间。</p></blockquote><h2 id="数组的优点及特性"><a class="header-anchor" href="#数组的优点及特性" aria-hidden="true">#</a> <code>数组</code>的优点及特性</h2><h3 id="优点"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>随机访问：可以通过下标随机访问数组中的任意位置上的数据</li></ul><p><strong>根据下标随机访问的时间复杂度为 O(1)</strong></p><h3 id="特性"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3><ul><li>数组插入</li></ul><p>我们已经知道数组是一段连续储存的内存，当我们要将新元素插入到数组 k 的位置时呢?这个时候需要将 k 索引处之后的所有元素往后挪一位,并将 k 索引的位置插入新元素.</p><p><img src="https://raw.githubusercontent.com/yayxs/Pics/master/img/20200426203256.png" alt="20200426203256"></p><ul><li>删除</li></ul><p>删除操作其实与插入很类似,同样我要删除数组之内的 k 索引位置的元素,我们就需要将其删除后,为了保持内存的连续性,需要将 k 之后的元素通通向前移动一位,这个情况的时间复杂度也是 O(n).</p><ul><li>查找</li></ul><p>比如我们要查找一个数组中是否存在一个为 2 的元素,那么计算机需要如何操作呢?</p><p>如果是人的话,在少量数据的情况下我们自然可以一眼找到是否有 2 的元素,而计算机不是,计算机需要从索引 0 开始往下匹配,直到匹配到 2 的元素为止</p><ul><li>读取</li></ul><p>我们已经强调过数组的特点是拥有<strong>相同的数据类型</strong>和一块<strong>连续的线性内存</strong>,那么正是基于以上的特点,数组的读取性能非常的卓越,时间复杂度为 O(1),相比于链表、二叉树等数据结构,它的优势非常明显.</p><p>那么数组是如何做到这么低的时间复杂度呢?</p><p>假设我们的数组内存起始地址为<code>start</code>,而元素类型的长度为<code>size</code>,数组索引为<code>i</code>,那么我们很容易得到这个数组内存地址的寻址公式:</p><div class="language-js"><pre><code>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>_address <span class="token operator">=</span> start <span class="token operator">+</span> size <span class="token operator">*</span> i\n</code></pre></div><p>比如我们要读取<code>arr[3]</code>的值,那么只需要把<code>3</code>代入寻址公式,计算机就可以一步查询到对应的元素,因此数组读取的时间复杂度只有 O(1).</p><h2 id="数组的构造器有哪几种"><a class="header-anchor" href="#数组的构造器有哪几种" aria-hidden="true">#</a> 数组的构造器有哪几种</h2><ul><li>new Array()</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>Array.of</li></ul><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8,5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8,5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>Array.from</li></ul><p>就是从一个类似数组的可迭代对象中创建一个新的数组实例。其实就是，只要一个对象有迭代器，Array.from 就能把它变成一个数组（注意：是返回新的数组，不改变原对象）。</p><h2 id="数组是如何存储的"><a class="header-anchor" href="#数组是如何存储的" aria-hidden="true">#</a> <code>数组</code>是如何存储的</h2><p>跟其他语言中的数组一样，ECMAScript 数组也是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。这意味着可以创建一个数组，它的第一个元素是字符串，第二个元素是数值，第三个是对象。ECMAScript 数组也是动态大小的，会随着数据添加而自动增长。</p><div class="language-js"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li><p>其中常量<code>arr</code> 是存放在栈空间，存放的实际是 地址（一个指向 [] 的指针）</p></li><li><p>当存放一种类型的时候比如</p><div class="language-"><pre><code>const arr = [1,2,3]\n</code></pre></div></li></ul><p>这时候是<strong>连续的内存</strong></p><ul><li><p>但如果我们定义了不同类型的元素</p><div class="language-"><pre><code>const arr = [&#39;str&#39;, 1, {a:1}]\n</code></pre></div><p>它对应的就是一段非连续的内存。此时，JS 数组不再具有数组的特征，其底层使用哈希映射分配内存空间，是由对象链表来实现的。</p></li></ul><h2 id="改变自身的方法"><a class="header-anchor" href="#改变自身的方法" aria-hidden="true">#</a> 改变自身的方法</h2><blockquote><p>pop push reverse shift sort unshift splice</p></blockquote><ul><li>push</li></ul><div class="language-js"><pre><code></code></pre></div><ul><li>pop</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;王二&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;麻子&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;麻子&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;张三&#39;, &#39;李四&#39;, &#39;王二&#39; ]</span>\n</code></pre></div><ul><li>unshift</li></ul><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&quot;第零个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token number">4</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>shift</li></ul><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>toString</li></ul><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">//   第一个元素,第二个元素,第三个元素</span>\n</code></pre></div><ul><li>splice</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\nresult <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;替换掉第三个元素&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [&quot;第一个元素&quot;, &quot;第二个元素&quot;, &quot;替换掉第三个元素&quot;]</span>\n<span class="token comment">// 原始的数组的length 3</span>\n<span class="token comment">// api过后 [&quot;第三个元素&quot;]</span>\n</code></pre></div><ul><li>slice 返回新数组副本</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\nresult <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;第一个元素&#39;,&#39;第二个元素&#39;,&#39;第三个元素&#39;]</span>\nresult <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;第一个元素&#39;,&#39;第二个元素&#39;,&#39;第三个元素&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原始的数组&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;第一个元素&#39;,&#39;第二个元素&#39;,&#39;第三个元素&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;api过后&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;第一个元素&#39;,&#39;第二个元素&#39;,&#39;第三个元素&#39;]</span>\n</code></pre></div><ul><li>concat()</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>zero<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-3, -2, -1, 0,1,  2,  3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-3, -2, -1]</span>\n</code></pre></div><ul><li>indexof</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\n\nresult <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原始的数组&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;第一个元素&quot;, &quot;第二个元素&quot;, &quot;第三个元素&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;api过后&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 索引 2</span>\n</code></pre></div><ul><li>includes</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;第一个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二个元素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\n\nresult <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;第三个元素&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原始的数组&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;第一个元素&quot;, &quot;第二个元素&quot;, &quot;第三个元素&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;api过后&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="数组中增加元素的方式"><a class="header-anchor" href="#数组中增加元素的方式" aria-hidden="true">#</a> 数组中增加元素的方式</h2><ul><li>unshift</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0,1,2]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre></div><ul><li>push</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre></div><ul><li>splice</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,1,2]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n</code></pre></div><h2 id="计算两个数组的交集"><a class="header-anchor" href="#计算两个数组的交集" aria-hidden="true">#</a> 计算两个数组的交集</h2><h2 id="类数组（伪数组）和数组的区别是什么？"><a class="header-anchor" href="#类数组（伪数组）和数组的区别是什么？" aria-hidden="true">#</a> 类数组（伪数组）和数组的区别是什么？</h2><p>在浏览器和其它环境中有一种称为“类数组”的对象，它们 看似是数组。也就是说，它们有 length 和索引属性，但是也可能有其它的非数字的属性和方法，这通常是我们不需要的。for..in 循环会把它们都列出来。所以如果我们需要处理类数组对象，这些“额外”的属性就会存在问题。</p><h3 id="类（伪）数组（arraylike）"><a class="header-anchor" href="#类（伪）数组（arraylike）" aria-hidden="true">#</a> 类（伪）数组（arraylike）</h3><ul><li><p>就是像数组的对象（某些对象看起来像但不是）</p></li><li><p><strong>通过索引属性访问元素</strong></p></li><li><p><strong>拥有 length</strong> 属性的对象</p></li><li><p>underscore 中的定义</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token constant">MAX_ARRAY_INDEX</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> getLength <span class="token operator">=</span> <span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&quot;length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isArrayLike</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> length <span class="token operator">==</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token constant">MAX_ARRAY_INDEX</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其中 JavaScript 中能精确表示的最大数字</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p><strong>没有数组的方法</strong>（push forEach）</p></li></ul><div class="language-js"><pre><code>arrayLike<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 01.js:20 Uncaught TypeError: arrayLike.push is not a function</span>\n</code></pre></div><h4 id="形式"><a class="header-anchor" href="#形式" aria-hidden="true">#</a> 形式</h4><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>\n\narray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;new name&quot;</span><span class="token punctuation">;</span>\narrayLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;new name&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new name</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new name</span>\n</code></pre></div><h4 id="间接调用"><a class="header-anchor" href="#间接调用" aria-hidden="true">#</a> 间接调用</h4><div class="language-js"><pre><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;]</span>\n</code></pre></div><h2 id="判断一个变量是否为数组"><a class="header-anchor" href="#判断一个变量是否为数组" aria-hidden="true">#</a> 判断一个变量是否为数组</h2><p>也就是说怎么判断一个<code>JavaScript</code> 元素是个数组，这也是面试常问的问题。</p><p>但是数组是基于对象的，不构成单独的语言类型</p><h3 id="instanceof操作符"><a class="header-anchor" href="#instanceof操作符" aria-hidden="true">#</a> <code>instanceof操作符</code></h3><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 操作数组</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>缺点 使用 instanceof 的问题是假定只有一个全局执行上下文。如果网页里有多个框架，则可能涉及两个不同的全局执行上下文，因此就会有两个不同版本的 Array 构造函数。如果要把数组从一个框架传给另一个框架，则这个数组的构造函数将有别于在第二个框架内本地创建的数组。</p></blockquote><h3 id="array-isarray"><a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a> <code>Array.isArray</code></h3><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 说明value是一个数组</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>ECMAScript 提供了 Array.isArray()方法。这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。</p></blockquote><p><strong>缺点</strong> ：浏览器的支持不一</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Array]&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="object-prototype-tostring"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> <code>Object.prototype.toString</code></h2><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Object]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre></div><p>这样我们可以</p><div class="language-js"><pre><code><span class="token comment">// 方便起见，将 toString 方法复制到一个变量中</span>\n<span class="token keyword">let</span> objectToString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>\n\n<span class="token comment">// 它是什么类型的？</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">objectToString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>至于为什么我们需要使用<code>call</code> 来绑定 this，是因为 <strong><code>toString</code> 的算法会检查 <code>this</code>，并返回相应的结果</strong></p><h3 id="相关代码"><a class="header-anchor" href="#相关代码" aria-hidden="true">#</a> 相关代码</h3><div class="language-js"><pre><code><span class="token comment">// 判断是否是数组</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yayxs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// console.log(arr.toString()) hello,yayxs</span>\n<span class="token comment">// 常用于判断浏览器内置对象</span>\n<span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>\n\n<span class="token comment">/**\n * String\n * Number\n * Symbol\n * Null\n * Undefi\n * Func\n * Obj\n */</span>\n<span class="token comment">// 定义一个函数用来判断数据类型</span>\n\n<span class="token keyword">function</span> <span class="token function">isWhatType</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> targets <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&quot;yayxs&quot;</span><span class="token punctuation">,</span>\n  <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;yayxs&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> targets<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">isWhatType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * [\n *&#39;[object String]&#39;,\n *&#39;[object Number]&#39;,\n *&#39;[object Symbol]&#39;,\n *&#39;[object Null]&#39;,\n *&#39;[object Undefined]&#39;,\n *&#39;[object Function]&#39;,\n *&#39;[object Object]&#39;\n *]\n */</span>\n<span class="token comment">// 第二种方式通过判断对象的原型链中能不能找到</span>\n<span class="token keyword">let</span> res3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><p>所以，如果我们想要获取内建对象的类型，并希望把该信息以字符串的形式返回，而不只是检查类型的话，我们可以用 <code>{}.toString.call</code> 替代 <code>instanceof</code>。</p><h2 id="数组里面有-10-万个数据，取第一个元素和第-10-万个元素的时间相差多少"><a class="header-anchor" href="#数组里面有-10-万个数据，取第一个元素和第-10-万个元素的时间相差多少" aria-hidden="true">#</a> 数组里面有 10 万个数据，取第一个元素和第 10 万个元素的时间相差多少</h2><h2 id="谈谈数组中的push方法"><a class="header-anchor" href="#谈谈数组中的push方法" aria-hidden="true">#</a> 谈谈数组中的<code>push</code>方法</h2><h3 id="数组中的length属性"><a class="header-anchor" href="#数组中的length属性" aria-hidden="true">#</a> 数组中的<code>length</code>属性</h3><p>准确来说，它实际上不是数组里元素的个数，而是最大的数字索引值加一。</p><div class="language-js"><pre><code><span class="token keyword">let</span> voidArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nvoidArr<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>voidArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 201</span>\n</code></pre></div><h3 id="数组的push"><a class="header-anchor" href="#数组的push" aria-hidden="true">#</a> 数组的<code>push</code></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener noreferrer">mdn 关于数组 push</a></li></ul><blockquote><p><code>push</code> 方法具有通用性。该方法和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener noreferrer"><code>call()</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener noreferrer"><code>apply()</code></a> 一起使用时，可应用在类似数组的对象上。<code>push</code> 方法根据 <code>length</code> 属性来决定从哪里开始插入给定的值。如果 <code>length</code> 不能被转成一个数值，则插入的元素索引为 0，包括 <code>length</code> 不存在时。当 <code>length</code> 不存在时，将会创建它。</p></blockquote><blockquote><p>唯一的原生类数组（array-like）对象是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer"><code>Strings</code></a>，尽管如此，它们并不适用该方法，因为字符串是不可改变的。</p></blockquote><p><strong>大白话</strong></p><p>其实 push 的时候会首先查询数组（伪数组）的 length 属性，接着在数组的最后一个添加上新的元素即 arr[length]</p><div class="language-js"><pre><code><span class="token keyword">var</span> testObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;2&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;3&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  length<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  push<span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ntestObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//// {2: 1, 3: 4, length: 3, push: ƒ}</span>\ntestObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{2: 1, 3: 2, length: 4, push: ƒ}</span>\n</code></pre></div><ul><li>第一点就是每次 push 后 length 会加 1</li></ul><p><img src="https://i.loli.net/2020/04/20/FthL2egVXTCy6vk.png" alt="00.png"></p><h3 id="splice-array-prototype-splice"><a class="header-anchor" href="#splice-array-prototype-splice" aria-hidden="true">#</a> &#39;splice&#39;: Array.prototype.splice</h3><ul><li><a href="https://github.com/ChromeDevTools/devtools-frontend/blob/master/front_end/event_listeners/EventListenersUtils.js#L330" target="_blank" rel="noopener noreferrer">在对象上加 splice</a></li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {?Object} obj\n * @return {boolean}\n */</span>\n<span class="token keyword">function</span> <span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>splice <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> len <span class="token operator">=</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token keyword">typeof</span> len <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> len <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span> <span class="token operator">===</span> len <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">/</span> len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>为什么对象添加了 splice 属性后并没有调用就会变成类数组对象这个问题，这是控制台中 DevTools 猜测类数组的一个方式</strong></p><ul><li>存在且是对象</li><li>对象上的<code>splice</code> 属性是函数类型</li><li>对象上有 <code>length</code> 属性且为正整数</li></ul>',119);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
