import{o as n,c as s,a}from"./app.78bcef79.js";const t='{"title":"手写实现instanceof运算符","description":"","frontmatter":{"title":"手写实现instanceof运算符"},"relativePath":"guide/written/instanceof.md","lastUpdated":1625578115411}',p={},o=a('<h1 id="手写实现-instanceof"><a class="header-anchor" href="#手写实现-instanceof" aria-hidden="true">#</a> 手写实现 instanceOf</h1><blockquote><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。（object instanceof constructor） 我们通过<code>new</code> 操作符 new 一个对象，这个对象是原型链继承上面的对象基本可以判断新对象的数据类型</p></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;yayxs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><blockquote><p>或者说一个对象是否属于某个特定的<code>class</code>,同时会考虑继承</p></blockquote><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">PersonClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> pClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pClass <span class="token keyword">instanceof</span> <span class="token class-name">PersonClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div>',5);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
