import{o as n,c as s,a}from"./app.78bcef79.js";const t='{"title":"如何正确的判断this的指向? 箭头函数的 this 是什么？","description":"","frontmatter":{"title":"如何正确的判断this的指向? 箭头函数的 this 是什么？"},"headers":[{"level":2,"title":"全局上下文中的 this","slug":"全局上下文中的-this"},{"level":2,"title":"函数执行上下文中的 this","slug":"函数执行上下文中的-this"},{"level":2,"title":"指向对象本身","slug":"指向对象本身"},{"level":2,"title":"设计的缺陷","slug":"设计的缺陷"},{"level":2,"title":"箭头函数的 this 是什么？","slug":"箭头函数的-this-是什么？"}],"relativePath":"guide/javascript/this.md","lastUpdated":1625578115371}',p={},o=a('<p><code>this</code> 实际上是在函数调用时发生的绑定，指向什么完全取决于函数在哪里被调用。而 this 和执行上下文中是绑定的 每个执行上下文都有一个 this</p><p>this 的分类同样有 3 种 全局执行上下文中的 this 函数中的 this 和 eval 中的 this。重点分析 全局执行上下文中的 this 和函数执行上下文</p><ul><li>在全局环境中调用一个函数，函数内部的 this 指向的是全局变量 window</li><li>通过一个对象来调用其内部的一个方法，该方法的执行上下文中的 this 指向对象本身</li></ul><h2 id="全局上下文中的-this"><a class="header-anchor" href="#全局上下文中的-this" aria-hidden="true">#</a> 全局上下文中的 this</h2><div class="language-js"><pre><code><span class="token comment">// 全局上下文中的this是指向window 对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="函数执行上下文中的-this"><a class="header-anchor" href="#函数执行上下文中的-this" aria-hidden="true">#</a> 函数执行上下文中的 this</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token comment">// console.log(this.a)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>总结：在默认情况下调用一个函数 其执行上下文中的 this 也是指向 window 对象</p><p><strong>那么能否设置当前执行上下文中的 this 指向其他对象呢？</strong></p></blockquote><h2 id="指向对象本身"><a class="header-anchor" href="#指向对象本身" aria-hidden="true">#</a> 指向对象本身</h2><blockquote><p>使用对象来调用其内部的一个方法，该方法的 this 是指向对象本身的。</p></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">指向对象obj</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre></div><ol><li>由 new 调用？绑定到新创建的对象。</li><li>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。</li><li>由上下文对象调用？绑定到那个上下文对象。</li><li>默认：在严格模式下绑定到 undefined，否则绑定到全局对象。</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是：baz</span>\n  <span class="token comment">// 因此，当前调用位置是全局作用域</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- bar 的调用位置</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar</span>\n  <span class="token comment">// 因此，当前调用位置在 baz 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- foo 的调用位置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar -&gt; foo</span>\n  <span class="token comment">// 因此，当前调用位置在 bar 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- baz 的调用位置</span>\n</code></pre></div><h2 id="设计的缺陷"><a class="header-anchor" href="#设计的缺陷" aria-hidden="true">#</a> 设计的缺陷</h2><ul><li>嵌套的函数中的 this 不会从外层中继承</li><li>普通函数中的 this 默认指向全局对象 window</li></ul><h2 id="箭头函数的-this-是什么？"><a class="header-anchor" href="#箭头函数的-this-是什么？" aria-hidden="true">#</a> 箭头函数的 this 是什么？</h2><p>ES6 中的箭头函数并不会创建其自身的执行上下文，所以箭头函数中的 this 取决于它的外部函数。</p>',17);p.render=function(a,t,p,c,e,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
