import{o as n,c as s,a}from"./app.78bcef79.js";const t='{"title":"请你谈谈 Vue 的数据响应原理","description":"","frontmatter":{},"headers":[{"level":3,"title":"请你谈谈 Vue 的数据响应原理","slug":"请你谈谈-vue-的数据响应原理"}],"relativePath":"guide/vue/responsive.md","lastUpdated":1625578115407}',p={},o=a('<h3 id="请你谈谈-vue-的数据响应原理"><a class="header-anchor" href="#请你谈谈-vue-的数据响应原理" aria-hidden="true">#</a> 请你谈谈 Vue 的数据响应原理</h3><p>首先看一个例子,当我们修改a 的时候 <code>vm.$watch</code> 的第二个参数就会执行输出</p><div class="language-js"><pre><code><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * 参数一 观测的字段\n * 参数二 参数发生变化的时候，执行的函数\n */</span>\nvm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改了 a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们自己简单的实现</p><div class="language-js"><pre><code> <span class="token comment">// 定义一个变量</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 定义全局的变量</span>\n      <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>\n      <span class="token keyword">function</span> <span class="token function">$watch</span><span class="token punctuation">(</span><span class="token parameter">prop<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n        data<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 读取字段</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 首先定义一个框</span>\n      <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dep<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性被设置时候 将篮子里的所有 依赖执行</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 当属性被读取的时候</span>\n          dep<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第一个依赖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第二个依赖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>假使有个数据对象，在被观测之后，便是</p><div class="language-js"><pre><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token punctuation">{</span>\n    b<span class="token operator">:</span><span class="token number">1</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 属性 a 通过 setter/getter 通过闭包引用着 dep 和 childOb</span>\n  a<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 属性 b 通过 setter/getter 通过闭包引用着 dep 和 childOb</span>\n    b<span class="token operator">:</span> <span class="token number">1</span>\n    __ob__<span class="token operator">:</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> vmCount<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  __ob__<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> vmCount<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="vue-中依赖收集的触发时机是一定的吗"><a class="header-anchor" href="#vue-中依赖收集的触发时机是一定的吗" aria-hidden="true">#</a> Vue 中依赖收集的触发时机是一定的吗</h4><h4 id="在vue2中是怎么拦截对象或数组添加的元素或属性"><a class="header-anchor" href="#在vue2中是怎么拦截对象或数组添加的元素或属性" aria-hidden="true">#</a> 在Vue2中是怎么拦截对象或数组添加的元素或属性</h4><p>通过官方 api 的讲解 我们可以通过 Vue.set 以及 Vue.delete 来解决这个问题</p>',10);p.render=function(a,t,p,c,e,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
