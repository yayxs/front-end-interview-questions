import{o as n,c as a,a as s}from"./app.78bcef79.js";const t='{"title":"JS中的内存泄漏的理解？","description":"","frontmatter":{"title":"JS中的内存泄漏的理解？"},"headers":[{"level":2,"title":"全局变量","slug":"全局变量"},{"level":2,"title":"定时器","slug":"定时器"}],"relativePath":"guide/javascript/ram.md","lastUpdated":1625578115355}',p={},e=s('<h2 id="全局变量"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h2><p>全局变量挂载到window上 只要window还在<br> 意外声明全局变量是最常见但也最容易修复的内存泄漏问题</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;yayxs&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="定时器"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h2><p>只要定时器一直运行，回调函数中引用的name就会一直占用内存。垃圾回收程序当然知道这一点，因而就不会清理外部变量。定时器在执行，name就一直被引用着，垃圾回收也知道这一点</p><div class="language-js"><pre><code> <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yaxys</span><span class="token template-punctuation string">`</span></span>\n        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">定时器的回调</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>\n</code></pre></div>',6);p.render=function(s,t,p,o,c,l){return n(),a("div",null,[e])};export default p;export{t as __pageData};
