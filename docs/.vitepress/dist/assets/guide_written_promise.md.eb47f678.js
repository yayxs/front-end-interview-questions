import{o as n,c as s,a}from"./app.78bcef79.js";const p='{"title":"手写实现promise","description":"","frontmatter":{"title":"手写实现promise"},"headers":[{"level":2,"title":"回调的问题","slug":"回调的问题"}],"relativePath":"guide/written/promise.md","lastUpdated":1625578115412}',t={},o=a('<h1 id="手写实现promise"><a class="header-anchor" href="#手写实现promise" aria-hidden="true">#</a> 手写实现promise</h1><ul><li>问题一 <code>Promise</code>构造函数是同步还是异步执行</li><li>问题二：<code>then</code>中的方法呢 ?</li><li>问题三：<code>promise</code>如何实现<code>then</code>处理 ?</li></ul><h2 id="回调的问题"><a class="header-anchor" href="#回调的问题" aria-hidden="true">#</a> 回调的问题</h2><ul><li>代码臃肿。</li><li>可读性差。</li><li>耦合度过高，可维护性差。</li><li>代码复用性差。</li><li>容易滋生 bug。</li><li>只能在回调里处理异常。</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token string">&#39;http://xxx.xxx.1&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> url2 <span class="token operator">=</span> <span class="token string">&#39;http://xxx.xxx.2&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> url3 <span class="token operator">=</span> <span class="token string">&#39;http://xxx.xxx.3&#39;</span><span class="token punctuation">;</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span>url1<span class="token punctuation">,</span>\n    <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            url<span class="token operator">:</span>url2<span class="token punctuation">,</span>\n            data<span class="token operator">:</span>data1<span class="token punctuation">,</span>\n            <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    url<span class="token operator">:</span>url3<span class="token punctuation">,</span>\n                    data<span class="token punctuation">,</span>\n                    <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>大家都在说<code>promise</code> ，面试的时候也基本是必问的问题，一般知识点的话，一些网上的参考文章是不会过时的，比如像一些配置性的文章大家可能喜欢看最近的文章。我们将从<strong>基本概念</strong> <strong>原理</strong> <strong>面试</strong> 去看这些问题。首先要说的就是<code>promise</code> 一般我们就是读文档，从简单到难。</p><blockquote><p>Promise 是个对象</p></blockquote><div class="language-js"><pre><code>Promise <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>\n<span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre></div><blockquote><p>代表一个异步操作的最终完成或者失败</p></blockquote><p>假设现在我们需要这样一件事情：<strong>创建一个音频文件，这就需要我们准备两个回调函数，一是成功的时候调用，二是失败的时候调用</strong></p><p><img src="https://raw.githubusercontent.com/yayxs/Pics/master/image-20200610213825567.png" alt="image-20200610213825567"></p><p>那这样我们就需要准备两个回调函数，有了<code>promise</code> 之后，我们就可以这样</p><div class="language-js"><pre><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><blockquote><p>对象的构造器语法</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>传给<code>peomise</code> 的函数会自动执行</p><div class="language-js"><pre><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数立即执行&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><code>Promise</code>是一个构造函数，使用<code>new</code>操作符返回一个<code>promise</code>对象构造函数接收一个<code>excutor</code>函数作为参数，excutor 函数有两个函数类型的参数 resolve 和 reject，这两个函数都是<code>js</code> 尝试去调用的</p><p>返回的这个<code>p</code> 有内部两个属性，起初的时候是 <code>pending</code> <code>undefined</code></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token punctuation">[</span>PromiseState<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;pending&quot;</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span>PromiseResult<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span>\n</code></pre></div>',20);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
