import{o as n,c as s,a}from"./app.78bcef79.js";const p='{"title":"不精确的计算之为什么 0.1 + 0.2 != 0.3","description":"","frontmatter":{"title":"不精确的计算之为什么 0.1 + 0.2 != 0.3"},"headers":[{"level":2,"title":"解决","slug":"解决"}],"relativePath":"guide/javascript/0.3.md","lastUpdated":1625578109944}',t={},o=a('<h1 id="为什么-0-1-0-2-0-3"><a class="header-anchor" href="#为什么-0-1-0-2-0-3" aria-hidden="true">#</a> 为什么 0.1 + 0.2 != 0.3 ?</h1><div class="language-js"><pre><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0.3</span> <span class="token operator">-</span> <span class="token number">0.2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span>\n</code></pre></div><p>Js 有一种数据类型是 <code>Number</code> 其中有个浮点值（数值中必须包含小数点，而且小数点后面必须至少有一个数字） 浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确 由于这种微小的舍入错误，导致很难测试特定的浮点值</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>之所以存在这种舍入错误，是因为使用了 IEEE 754 数值(双精度浮点数)，这种错误并非 ECMAScript 所独有。其他使用相同格式的语言也有这个问题。</p><p>不仅仅是 JavaScript 许多其他编程语言也存在同样的问题。</p><p>PHP，Java，C，Perl，Ruby 给出的也是完全相同的结果，因为它们基于的是相同的数字格式。</p></div><p>一个数字以其二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的 0.1，0.2 这样的小数，实际上在二进制形式中是无限循环小数。</p><h2 id="解决"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h2><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>请注意，toFixed 总是返回一个字符串。它确保小数点后有 2 位数字。如果我们有一个电子购物网站，并需要显示 ¥ 0.30，这实际上很方便。对于其他情况，我们可以使用一元加号将其强制转换为一个数字：</p><div class="language-js"><pre><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0.30</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span>sum<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0.3</span>\n</code></pre></div>',10);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
