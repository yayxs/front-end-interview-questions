import{o as n,c as s,a}from"./app.0c83b2b0.js";const t='{"title":"在Vue框架中，为什么尽量不要修改props","description":"","frontmatter":{"title":"在Vue框架中，为什么尽量不要修改props"},"headers":[{"level":2,"title":"了解Prop","slug":"了解prop"},{"level":3,"title":"基本用法","slug":"基本用法"},{"level":3,"title":"常见类型","slug":"常见类型"},{"level":2,"title":"在 Vue 中，子组件为何不可以修改父组件传递的 Prop ？","slug":"在-vue-中，子组件为何不可以修改父组件传递的-prop-？"},{"level":3,"title":"尝试修改会发生什么事情","slug":"尝试修改会发生什么事情"},{"level":3,"title":"单向数据流","slug":"单向数据流"},{"level":3,"title":"什么情况下，我们会改变这个prop","slug":"什么情况下，我们会改变这个prop"},{"level":2,"title":"如果修改了，Vue 是如何监控到属性的修改并给出警告的","slug":"如果修改了，vue-是如何监控到属性的修改并给出警告的"},{"level":2,"title":"思考","slug":"思考"},{"level":2,"title":"vue3中修改后","slug":"vue3中修改后"},{"level":2,"title":"推荐阅读","slug":"推荐阅读"}],"relativePath":"guide/vue/props.md","lastUpdated":1615877423028}',p={},o=a('<h1 id="在vue框架中，为什么尽量不要修改props"><a class="header-anchor" href="#在vue框架中，为什么尽量不要修改props" aria-hidden="true">#</a> 在Vue框架中，为什么尽量不要修改props</h1><h2 id="了解prop"><a class="header-anchor" href="#了解prop" aria-hidden="true">#</a> 了解Prop</h2><h3 id="基本用法"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><div class="language-html"><pre><code><span class="token comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">post-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello!<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;blog-post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在 JavaScript 中是 camelCase 的</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;postTitle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;h3&gt;{{ postTitle }}&lt;/h3&gt;&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="常见类型"><a class="header-anchor" href="#常见类型" aria-hidden="true">#</a> 常见类型</h3><h4 id="字符串数组的形式"><a class="header-anchor" href="#字符串数组的形式" aria-hidden="true">#</a> 字符串数组的形式</h4><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isPublished&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commentIds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">]</span>\n</code></pre></div><h4 id="对象的形式"><a class="header-anchor" href="#对象的形式" aria-hidden="true">#</a> 对象的形式</h4><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  likes<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n  isPublished<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>\n  commentIds<span class="token operator">:</span> Array<span class="token punctuation">,</span>\n  author<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  callback<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  contactsPromise<span class="token operator">:</span> Promise <span class="token comment">// or any other constructor</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="汇总"><a class="header-anchor" href="#汇总" aria-hidden="true">#</a> 汇总</h4><p>整体来说可以分为<code>传递静态的值</code> 和<code>通过v-bind 传递动态的值</code></p><ul><li>传递一个数字</li><li>传递一个布尔值</li><li>传入一个数组</li><li>传入一个对象</li><li>传入一个对象的所有的属性</li></ul><div class="language-js"><pre><code>\npost<span class="token operator">:</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;My Journey with Vue&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>以下两种方式是等价的</strong></p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>\n  <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.id<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.title<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="在-vue-中，子组件为何不可以修改父组件传递的-prop-？"><a class="header-anchor" href="#在-vue-中，子组件为何不可以修改父组件传递的-prop-？" aria-hidden="true">#</a> 在 Vue 中，子组件为何不可以修改父组件传递的 Prop ？</h2><h3 id="尝试修改会发生什么事情"><a class="header-anchor" href="#尝试修改会发生什么事情" aria-hidden="true">#</a> 尝试修改会发生什么事情</h3><p>首先创建一个文件来演示<code>props</code> 传值（父组件的数据传递给子组件）</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue-prop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      {{ message }}\n\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>学习<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token comment">// 组件本质上是一个拥有预定义选项的一个 Vue 实例</span>\n      <span class="token comment">// 注册一个TODO组件</span>\n      Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;todo-item&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;div&gt;\n        &lt;li&gt;{{todo}}&lt;/li&gt;\n        &lt;button @click = &quot;changeProps&quot;&gt;尝试改变父组件传来的prop&lt;/button&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function">changeProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">子组件的按钮触发</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>todo <span class="token operator">=</span> <span class="token string">&quot;玩耍&quot;</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            message<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div><p>结果是什么，数据也是可以修改成功的，但是控制台会报一个警告</p><div class="language-"><pre><code>vue.js:634 [Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop&#39;s value. Prop being mutated: &quot;todo&quot;\n</code></pre></div><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/171530821e76afc2?w=1547&amp;h=367&amp;f=png&amp;s=42339" alt="微信截图_20200407105110.png"></p><h3 id="单向数据流"><a class="header-anchor" href="#单向数据流" aria-hidden="true">#</a> 单向数据流</h3><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p></blockquote><blockquote><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p></blockquote><p><strong>简单的来说，vue这样处理从父组件来的数据，是为了方便监测数据的流动，如果一旦出现的错误，可以更为迅速的定位到错误的位置，</strong></p><h3 id="什么情况下，我们会改变这个prop"><a class="header-anchor" href="#什么情况下，我们会改变这个prop" aria-hidden="true">#</a> 什么情况下，我们会改变这个prop</h3><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;initialCounter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><strong>第一种情况</strong>：这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值。<code>借助data</code></li></ul><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\ncomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><strong>第二种情况</strong>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性<code>借助计算属性</code></li></ul><h2 id="如果修改了，vue-是如何监控到属性的修改并给出警告的"><a class="header-anchor" href="#如果修改了，vue-是如何监控到属性的修改并给出警告的" aria-hidden="true">#</a> 如果修改了，Vue 是如何监控到属性的修改并给出警告的</h2><p>这里我们可以去源码里找答案，毕竟真实的警告暗示是<code>vue</code>来给出的</p><div class="language-"><pre><code>src&gt;core&gt;instance&gt;state.js // 源码的位置\n</code></pre></div><div class="language-js"><pre><code>\n<span class="token keyword">function</span> <span class="token function">initProps</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span> propsOptions<span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> propsData <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// cache prop keys so that future props updates can iterate using Array</span>\n  <span class="token comment">// instead of dynamic object key enumeration.</span>\n  <span class="token comment">// 缓存prop的keys 为了是将来更新的props可以使用数组进行迭代，而不是动态的对象枚举</span>\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$parent\n  <span class="token comment">// root instance props should be converted</span>\n  <span class="token comment">// 不是root根组件</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propsOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>\n    <span class="token comment">/* istanbul ignore else */</span>\n    <span class="token comment">// 通过判断是否在开发环境</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>\n          config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hyphenatedKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is a reserved attribute and cannot be used as component prop.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n          vm\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 如果不是，说明此修改来自子组件，触发warning提示</span>\n      <span class="token comment">/**\n       * 传入的第4个函数是自定义的set函数，当props被修改的时候就会触发第四个参数的函数\n       */</span>\n      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">warn</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Avoid mutating a prop directly since the value will be </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">overwritten whenever the parent component re-renders. </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Instead, use a data or computed property based on the prop&#39;s </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">value. Prop being mutated: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            vm\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果是开发环境，会在触发Set的时候判断是否此key是否处于updatingChildren中被修改</span>\n      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// static props are already proxied on the component&#39;s prototype</span>\n    <span class="token comment">// during Vue.extend(). We only need to proxy props defined at</span>\n    <span class="token comment">// instantiation here.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_props</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-"><pre><code>src&gt;core&gt;observer&gt;index.js\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * Define a reactive property on an Object.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span>\n  <span class="token parameter">obj<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  key<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  val<span class="token operator">:</span> any<span class="token punctuation">,</span>\n  customSetter<span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>\n  shallow<span class="token operator">?</span><span class="token operator">:</span> boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// cater for pre-defined getter/setters</span>\n  <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>get\n  <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>set\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> value\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val\n      <span class="token comment">/* eslint-disable no-self-compare */</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">/* eslint-enable no-self-compare */</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// #7981: for accessor properties without setter</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        val <span class="token operator">=</span> newVal\n      <span class="token punctuation">}</span>\n      childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>\n      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="思考"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>如果是传入的是引用的数据类型，控制台会警告嘛？</p><div class="language-html"><pre><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>学习<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:todolist</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todolist<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-html"><pre><code>   var vm = new Vue({\n        el: &quot;#app&quot;,\n        data() {\n          return {\n            message: &quot;hello&quot;,\n            todolist: [\n              {\n                id: &quot;1&quot;,\n                todo: &quot;吃饭&quot;\n              }\n            ]\n          };\n        }\n      });\n</code></pre></div><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/171530821f7e6dd2?w=1536&amp;h=282&amp;f=png&amp;s=35792" alt="02.png"></p><h2 id="vue3中修改后"><a class="header-anchor" href="#vue3中修改后" aria-hidden="true">#</a> vue3中修改后</h2><div class="language-html"><pre><code>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item) in todoList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number-show</span> <span class="token attr-name">:number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parentNumber<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>number-show</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>obj-name</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>obj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>obj-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@next<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            app<span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>\n            todoList<span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">{</span>\n                id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                <span class="token keyword">do</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">eat</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span>\n                id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                <span class="token keyword">do</span><span class="token operator">:</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            parentNumber<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            obj<span class="token operator">:</span><span class="token punctuation">{</span>\n              name<span class="token operator">:</span><span class="token string">&#39;yayx&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token comment">// 创建vue 应用</span>\n      <span class="token keyword">const</span> vApp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      vApp<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;todo-item&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n       &lt;li&gt;{{todo.do}}&lt;/li&gt;\n       </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      vApp<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;number-show&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function">handleChangeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token comment">// Attempting to mutate prop &quot;number&quot;. Props are readonly.</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;number&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;div&gt;\n       &lt;span&gt;{{number}}&lt;/span&gt;\n       &lt;button @click=&quot;handleChangeNumber&quot;&gt;基本类型改变&lt;/button&gt;\n       &lt;/div&gt;\n       </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      vApp<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;obj-name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;obj&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function">handleChangeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">new name</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n            <span class="token comment">// Attempting to mutate prop &quot;number&quot;. Props are readonly.</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;div&gt;\n       &lt;span&gt;{{obj.name}}&lt;/span&gt;\n       &lt;button @click=&quot;handleChangeObj&quot;&gt;引用类型改变&lt;/button&gt;\n       &lt;/div&gt;\n       </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">//  挂载</span>\n      vApp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="推荐阅读"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener noreferrer">vue官网props部分</a></li></ul>',48);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
