import{o as a,c as n,a as s}from"./app.78bcef79.js";const e='{"title":"创建对象的方式","description":"","frontmatter":{"title":"创建对象的方式"},"headers":[{"level":2,"title":"构造函数的语法","slug":"构造函数的语法"},{"level":2,"title":"对象字面量的方式","slug":"对象字面量的方式"},{"level":2,"title":"Object.create","slug":"object-create"}],"relativePath":"guide/javascript/create_obj.md","lastUpdated":1625578113097}',t={},o=s('<h1 id="创建对象的方式"><a class="header-anchor" href="#创建对象的方式" aria-hidden="true">#</a> 创建对象的方式</h1><h2 id="构造函数的语法"><a class="header-anchor" href="#构造函数的语法" aria-hidden="true">#</a> 构造函数的语法</h2><p>第一种是使用 new 操作符和 Object 构造函数,新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。</p><div class="language-js"><pre><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyObj<span class="token punctuation">.</span>key <span class="token operator">=</span> value<span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="对象字面量的方式"><a class="header-anchor" href="#对象字面量的方式" aria-hidden="true">#</a> 对象字面量的方式</h2><div class="language-js"><pre><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>\nkey<span class="token operator">:</span> value\n<span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div><h2 id="object-create"><a class="header-anchor" href="#object-create" aria-hidden="true">#</a> Object.create</h2><ol><li>创建一个对象<code>myObject</code> 并把这个对象的 <code>[[Prototype]]</code> 关联到指定的对象, 利用给定的 proto 作为 [[Prototype]] 和可选的属性描述来创建一个空对象</li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  eats<span class="token operator">:</span><span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> rabbit <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span>\n</code></pre></div>',10);t.render=function(s,e,t,p,c,r){return a(),n("div",null,[o])};export default t;export{e as __pageData};
