import{o as n,c as s,a}from"./app.78bcef79.js";const p='{"title":"闭包及作用闭包有哪些使用场景？优缺点是什么","description":"","frontmatter":{"title":"闭包及作用闭包有哪些使用场景？优缺点是什么"},"headers":[{"level":2,"title":"应用场景","slug":"应用场景"},{"level":2,"title":"缺点","slug":"缺点"}],"relativePath":"guide/javascript/bibao.md","lastUpdated":1625578111744}',o={},t=a('<p>是指内部函数总是可以访问其所在外部函数中声明的变量和参数，即使外部函数被返回了</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar()涵盖foo()作用域的闭包</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包。</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> bar\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步（或者同步）任务中，只要使 用了回调函数，实际上就是在使用闭包！</p></blockquote><h2 id="应用场景"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>模块，当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时 就产生了闭包。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b <span class="token operator">=</span> <span class="token number">2</span>\n\n  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> add\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span>\n\n<span class="token keyword">var</span> globalFoo <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">globalFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="缺点"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>闭包使用不当不造成内存泄漏，</p><ul><li>引用闭包的函数是全局变量 闭包一直存在直到页面关闭 闭包以后不再使用的话 就会内存泄漏</li><li>引用闭包的函数是局部变量 等函数销毁后在下次 JS 引擎垃圾回收时候 被回收掉</li></ul>',11);o.render=function(a,p,o,c,e,u){return n(),s("div",null,[t])};export default o;export{p as __pageData};
