import{o as n,c as s,a}from"./app.0c83b2b0.js";const t='{"title":"手写实现trim方法","description":"","frontmatter":{"title":"手写实现trim方法"},"relativePath":"guide/written/trim.md","lastUpdated":1615877423032}',p={},e=a('<h1 id="手写实现-string-prototpye-trim-方法"><a class="header-anchor" href="#手写实现-string-prototpye-trim-方法" aria-hidden="true">#</a> 手写实现 String.prototpye.trim() 方法</h1><p>ECMAScript 在所有字符串上都提供了 trim()方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。 由于 trim()返回的是字符串的副本，因此原始字符串不受影响，即原本的前、后空格符都会保留。</p><p><strong>为简化子字符串替换操作，ECMAScript 提供了 replace()方法。这个方法接收两个参数，第一个参数可以是一个 RegExp 对象或一个字符串（这个字符串不会转换为正则表达式），第二个参数可以是一个字符串或一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替换所有子字符串，第一个参数必须为正则表达式并且带全局标记，</strong></p><blockquote><p>用 replace 结合正则实现清除字符串两边空格的方法 保留两侧的空格，而清除内部的空格</p></blockquote><div class="language-js"><pre><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim\nƒ <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>native code<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+|\\s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n\n<span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+|\\s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">   as</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">undefined</span>\n<span class="token keyword">let</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token constant">VM5152</span><span class="token operator">:</span><span class="token number">2</span> String <span class="token punctuation">{</span><span class="token string">&quot;   as&quot;</span><span class="token punctuation">}</span>\n<span class="token keyword">undefined</span>\nres\n<span class="token string">&quot;as&quot;</span>\n</code></pre></div>',5);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
