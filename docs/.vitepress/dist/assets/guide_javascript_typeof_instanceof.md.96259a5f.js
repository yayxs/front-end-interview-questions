import{o as n,c as s,a}from"./app.78bcef79.js";const t='{"title":"typeof和instanceof检测数据类型有什么区别？","description":"","frontmatter":{"title":"typeof和instanceof检测数据类型有什么区别？"},"headers":[{"level":2,"title":"typeof","slug":"typeof"},{"level":2,"title":"instanceof","slug":"instanceof"},{"level":3,"title":"instanceof实现的原理是什么","slug":"instanceof实现的原理是什么"},{"level":2,"title":"两种判断数据类型的差异","slug":"两种判断数据类型的差异"}],"relativePath":"guide/javascript/typeof_instanceof.md","lastUpdated":1625578115382}',e={},o=a('<blockquote><p>typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？</p></blockquote><h2 id="typeof"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> <code>typeof</code></h2><ul><li>typeof 操作符适合用来判断一个变量是否是原始类型，确切的说是判断一个变量是不是 <code>数值</code> <code>字符串</code> <code>布尔值</code> <code>undefined</code> 的最好方式</li></ul><div class="language-js"><pre><code><span class="token comment">// 基本的数据 类型</span>\n<span class="token keyword">const</span> isNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isStr <span class="token operator">=</span> <span class="token string">&#39;I am string&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isUndefined <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> isSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> isArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;i am obj&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isNull <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> targetArr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  isNumber<span class="token punctuation">,</span>\n  isStr<span class="token punctuation">,</span>\n  isBool<span class="token punctuation">,</span>\n  isArr<span class="token punctuation">,</span>\n  isObj<span class="token punctuation">,</span>\n  isNull<span class="token punctuation">,</span>\n  isUndefined<span class="token punctuation">,</span>\n  isSymbol<span class="token punctuation">,</span>\n  isFunc<span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> targetArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> targetArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>之所以类型是松散的，需要一种方式来检测当前数据类型</p><table><thead><tr><th>Tables</th><th style="text-align:center;">desc</th><th style="text-align:right;">other</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center;">number</td><td style="text-align:right;">检测成功</td></tr><tr><td>I am string</td><td style="text-align:center;">string</td><td style="text-align:right;">检测成功</td></tr><tr><td>true</td><td style="text-align:center;">boolean</td><td style="text-align:right;">检测成功</td></tr><tr><td>{name: &quot;i am obj&quot;}</td><td style="text-align:center;">object</td><td style="text-align:right;">检测成功</td></tr><tr><td>undefined</td><td style="text-align:center;">undefined</td><td style="text-align:right;">检测成功</td></tr><tr><td>Symbol()</td><td style="text-align:center;">symbol</td><td style="text-align:right;">检测成功</td></tr><tr><td>() =&gt; {}</td><td style="text-align:center;">function</td><td style="text-align:right;">检测成功</td></tr><tr><td>[0,2,2]</td><td style="text-align:center;">object</td><td style="text-align:right;">失败</td></tr><tr><td>null</td><td style="text-align:center;">object</td><td style="text-align:right;">失败(悠久的历史 bug、有问题的)</td></tr></tbody></table><p>调用 typeof null 返回的是&quot;object&quot;。这是因为特殊值 null 被认为是一个对空对象的引用。原理是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p><p><strong>小结</strong></p><p>对象和数组或者 null 返回的都是 object 检测不成功</p><div class="language-"><pre><code>　typeof操作符在用于检测函数时也会返回&quot;function&quot;。当在Safari（直到Safari 5）和Chrome（直到Chrome 7）中用于检测正则表达式时，由于实现细节的原因，typeof也会返回&quot;function&quot;。ECMA-262规定，任何实现内部[[Call]]方法的对象都应该在typeof检测时返回&quot;function&quot;。因为上述浏览器中的正则表达式实现了这个方法，所以typeof对正则表达式也返回&quot;function&quot;。在IE和Firefox中，typeof对正则表达式返回&quot;object&quot;。\n</code></pre></div><h2 id="instanceof"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> <code>instanceof</code></h2><p>上述的操作方式整体来说对对象作用不大<code>ECMAScript</code>提供了<code>instanceof</code>操作符,如果变量是给定引用类型由其原型链决定。主要作用：用于检查一个对象是否属于某个特定的<code>class</code> 同时考虑继承。</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// rabbit 是 Rabbit class 的对象吗？</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>rabbit <span class="token keyword">instanceof</span> <span class="token class-name">Rabbit</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="instanceof实现的原理是什么"><a class="header-anchor" href="#instanceof实现的原理是什么" aria-hidden="true">#</a> <code>instanceof</code>实现的原理是什么</h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="两种判断数据类型的差异"><a class="header-anchor" href="#两种判断数据类型的差异" aria-hidden="true">#</a> 两种判断数据类型的差异</h2><ul><li><p>instanceof 可以准确的判断复杂的引用数据类型 但是不能正确的判断基础数据类型</p></li><li><p>typeof 可以判断除 null 之外的基础数据类型 但是在引用数据类型中 除了 function 类型以外 其他无法判断</p></li></ul>',17);e.render=function(a,t,e,p,c,l){return n(),s("div",null,[o])};export default e;export{t as __pageData};
