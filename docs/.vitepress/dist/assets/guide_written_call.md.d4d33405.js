import{o as n,c as s,a}from"./app.0c83b2b0.js";const t='{"title":"手写实现call与apply","description":"","frontmatter":{"title":"手写实现call与apply"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"实现第一版 call","slug":"实现第一版-call"},{"level":2,"title":"实现第二版 call","slug":"实现第二版-call"},{"level":2,"title":"手动实现 apply","slug":"手动实现-apply"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"guide/written/call.md","lastUpdated":1615877423030}',p={},o=a('<h1 id="手写实现-call-与-apply"><a class="header-anchor" href="#手写实现-call-与-apply" aria-hidden="true">#</a> 手写实现 call 与 apply</h1><h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>函数可以被传递、用作对象等让我们先看一段代码,函数虽然将调用传递给原始的方法，但是上下文<code>this</code> 却会存在不见的地方，这也就引出我们的<code>call()</code>方法,<code>call</code> 是什么黑魔法，不过是一个<strong>内置函数方法</strong>，使用的方式是 <code>add.call()</code>,并且<code>add</code>函数自动执行输出结果,先来看一段代码</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 指向的就是 obj 在调用的时候把this绑定到了 obj上</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number {123}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 参数context 指定的this值</span>\n<span class="token comment">// arg1 参数一</span>\n<span class="token comment">// arg2 参数二</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;add函数中this&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this指向window</span>\n<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;yayxs&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this指向传入的 {name:&#39;yayxs&#39;}</span>\n</code></pre></div><h2 id="实现第一版-call"><a class="header-anchor" href="#实现第一版-call" aria-hidden="true">#</a> 实现第一版 call</h2><p>这时候我们把传入的对象抽离出来</p><div class="language-js"><pre><code><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;yayxs&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yayxs</span>\n</code></pre></div><div class="language-js"><pre><code>\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 其中this 就是sayName 这个函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token comment">//  {name: &quot;yayxs&quot;}</span>\n    ctx<span class="token punctuation">.</span>tempFunc <span class="token operator">=</span> <span class="token keyword">this</span>\n    ctx<span class="token punctuation">.</span><span class="token function">tempFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>tempFunc\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nsayName<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">&#39;参数一&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;参数二&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 理论上输出 yayxs</span>\n</code></pre></div><h2 id="实现第二版-call"><a class="header-anchor" href="#实现第二版-call" aria-hidden="true">#</a> 实现第二版 call</h2><p>我们上述的<code>myCall</code> 传入的参数一和参数二并没有参与感，再完善一下</p><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 其中this 就是sayName 这个函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token comment">//  {name: &quot;yayxs&quot;}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arguments&#39;</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> tempArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用来存放参数</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token operator">=</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 第一遍循环体 输出参数一 第二遍循环体 参数二</span>\n        tempArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;arguments[&#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tempArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>tempFunc <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token comment">// ctx.tempFunc()</span>\n    <span class="token keyword">let</span> evalScript <span class="token operator">=</span> <span class="token string">&#39;ctx.tempFunc(&#39;</span> <span class="token operator">+</span> tempArgs <span class="token operator">+</span><span class="token string">&#39;)&#39;</span>\n    <span class="token function">eval</span><span class="token punctuation">(</span>evalScript<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>tempFunc\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="手动实现-apply"><a class="header-anchor" href="#手动实现-apply" aria-hidden="true">#</a> 手动实现 apply</h2><div class="language-js"><pre><code>\n<span class="token comment">// ---------------- 实现myApply</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>tempFunc <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">let</span> result\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    result <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">tempFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 直接执行</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;arr[&#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;ctx.tempFunc(&#39;</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>tempFunc\n  <span class="token keyword">return</span> result \n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总体来说,<code>call</code> <code>apply</code> 函数的作用都是用来改变<code>this</code>的指向。目前的 js 还存在回调函数这一现象，尤其在框架中一些<code>异步回调</code>也是十分的常见，难免<code>this</code>会迷失方向既有不同也有相似，倘若自己手写代码实现<code>call</code> 与 <code>apply</code></p><ol><li>获取被绑定的函数</li><li>被绑定的函数追加到劫持替换的对象</li><li>被绑定的函数追加到劫持替换的对象</li></ol><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">作用</th><th style="text-align:center;">是否自动执行</th><th style="text-align:center;">参数列表</th></tr></thead><tbody><tr><td style="text-align:center;">call</td><td style="text-align:center;">改变 this 指向</td><td style="text-align:center;">自动执行函数</td><td style="text-align:center;">一般列表</td></tr><tr><td style="text-align:center;">apply</td><td style="text-align:center;">改变 this 指向</td><td style="text-align:center;">自动执行函数</td><td style="text-align:center;">数组形式</td></tr></tbody></table>',20);p.render=function(a,t,p,c,e,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
