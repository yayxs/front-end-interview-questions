import{o as n,c as s,a}from"./app.78bcef79.js";const p='{"title":"手写实现New操作符","description":"","frontmatter":{"title":"手写实现New操作符"},"headers":[{"level":2,"title":"延伸的面试题","slug":"延伸的面试题"},{"level":2,"title":"第一版的 myNew","slug":"第一版的-mynew"},{"level":2,"title":"第二版的 myNew","slug":"第二版的-mynew"},{"level":2,"title":"手写一个自己的 myNew 小结","slug":"手写一个自己的-mynew-小结"},{"level":2,"title":"箭头函数使用new","slug":"箭头函数使用new"}],"relativePath":"guide/written/new.md","lastUpdated":1625578115412}',t={},o=a('<h1 id="手写实现-javascript-中的-new-操作符"><a class="header-anchor" href="#手写实现-javascript-中的-new-操作符" aria-hidden="true">#</a> 手写实现 JavaScript 中的 New 操作符</h1><h2 id="延伸的面试题"><a class="header-anchor" href="#延伸的面试题" aria-hidden="true">#</a> 延伸的面试题</h2><p>根据<code>new操作符</code>相关的知识点一般会 延伸出以下的<strong>面试题</strong> ，面试官你是否有很多问号</p><ul><li>问题一：new 之后都做了些什么？？</li><li>问题二：能否手写 new 操作符原理？？</li><li>问题三：通过 new 的方式创建对象和通过字面量创建有什么区别</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener noreferrer">mdn 关于 new 运算符关键字的描述</a></p><blockquote><ol><li>创建一个空的简单 JavaScript 对象（即<code>{}</code>）；</li><li>链接该对象（即设置该对象的构造函数）到另一个对象 ；</li><li>将步骤 1 新创建的对象作为<code>this</code>的上下文 ；</li><li>如果该函数没有返回对象，则返回<code>this</code>。</li></ol></blockquote><p>以上 4 条是<code>MDN</code> 上关于 new 操作符（或者说关键字）的描述,那么当<code>new</code> 的时候 引擎做了几件事呢</p><div class="language-js"><pre><code>  <span class="token keyword">function</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-Create-OBj</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><ul><li><p>首先创建了一个空的对象 tempObj</p></li><li><p>接着调用<code>CreateObj.call</code> 方法 并将 <code>初始化的空对象tempObj</code> 作为call方法的参数，当<code>CreateObj</code>的执行上下文创建的时候 this 就指向了 `tempObj``</p></li><li><p>然后执行 <code>CreateObj</code> 函数 此时 函数执行上下文中的this 指向了<code>tempObj</code> 对象</p></li><li><p>最后把对象<code>tempObj</code>返回</p></li></ul></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token function">CreateObj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tempObj<span class="token punctuation">)</span>\n<span class="token keyword">return</span> tempObj\n</code></pre></div><p><strong>构造函数中的this其实就是新对象本身</strong></p><p>简单的来体验下利用构造函数来<code>new</code> 一个对象</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n<span class="token punctuation">}</span>\n<span class="token comment">// 然后在**构造函数添加原型方法**</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">180</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;yayxs&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// yayxs</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n<span class="token number">20</span>\np<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// yayxs</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 对象p（实例）的原型属性指向构造函数的原型，</span>\n</code></pre></div><p>既然我们通过自定义，其使用的方式大体跟<code>new</code> 是一样的。</p><div class="language-js"><pre><code><span class="token comment">// ------ 使用new的时候</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> myNew <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;yayxs&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 其返回的结果是一个对象</span>\n\n<span class="token comment">// ---------</span>\n</code></pre></div><h2 id="第一版的-mynew"><a class="header-anchor" href="#第一版的-mynew" aria-hidden="true">#</a> 第一版的 myNew</h2><p>大体思路是声明一个对象，取出当前的构造函数，以及参数，让新对象的原型属性指向构造函数的原型，然后调用构造函数，传入对象的参数</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>\n  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype\n\n  <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> obj\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="第二版的-mynew"><a class="header-anchor" href="#第二版的-mynew" aria-hidden="true">#</a> 第二版的 myNew</h2><p>经过上文的简单案例我们可以得知，</p><ul><li><p><code>new</code> 一个构造函数得到一个对象，它的原型属性（也就是** proto **）与该构造函数的原型是全等</p></li><li><p><code>new</code> 通过构造函数 <code>Persion</code> 创建出来的实例可以访问到构造函数中的属性,就像这样</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 小明</span>\n</code></pre></div></li><li><p>言简意赅：new 出来的实例对象通过原型链和构造函数联系起来</p></li></ul><p><strong>构造函数说白了也是一个函数，那是函数就可以有返回值</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token comment">//   return 1; // 返回内部新创建的对象</span>\n  <span class="token comment">//   return &quot;1&quot;; // 返回内部新创建的对象</span>\n  <span class="token comment">// return null; // 返回内部新创建的对象</span>\n  <span class="token comment">//   return undefined; // 返回内部新创建的对象</span>\n  <span class="token comment">//   return {}; // {} // 直接返回</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 直接返回</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// [1] // 直接返回</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n</code></pre></div><p>有了给构造函数返回一个值得想法，那就通过不同的<code>数据类型</code> 进行测试得出结论</p><ul><li>不同的数据类型返回的效果是不一样的，像数字 1 字符串”1“ ，返回的依然是内部创建的对象</li><li><strong>那如果返回一个对象（{}）或者说数组（[]）</strong> 都会直接返回回去</li></ul><h4 id="小结"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>也就是说，构造函数一般不需要<code>return</code></p><ul><li>返回一般的数据类型吧，不起作用</li><li>返回对象吧， new 的意义又何在呢</li></ul><div class="language-js"><pre><code>\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>constructor<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>\n   obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> res <span class="token operator">=</span>  <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">=</span>  <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="手写一个自己的-mynew-小结"><a class="header-anchor" href="#手写一个自己的-mynew-小结" aria-hidden="true">#</a> 手写一个自己的 myNew 小结</h2><p>如果自己实现一个 new 的话，首先要满足它的几点效果</p><ol><li><p>一个构造函数会返回一个对象，那函数里就应该有对象</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div></li><li><p>并将其<code>__proto__</code>属性指向构造函数的<code>prototype</code>属性</p><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype\n</code></pre></div></li><li><p>调用构造函数，绑定 this</p><div class="language-js"><pre><code><span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>返回原始值需要忽略，返回对象需要正常处理</p><div class="language-js"><pre><code>res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n</code></pre></div></li></ol><h2 id="箭头函数使用new"><a class="header-anchor" href="#箭头函数使用new" aria-hidden="true">#</a> 箭头函数使用<code>new</code></h2><p>但是 ES6 中介绍了一种无法使用这些规则的特殊函数类型：箭头函数</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: Foo is not a constructor</span>\n</code></pre></div><ul><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</li></ul><p><strong><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。</strong></p>',37);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
