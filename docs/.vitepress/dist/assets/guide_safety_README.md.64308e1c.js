import{o as e,c as r,a as s}from"./app.78bcef79.js";const l='{"title":"前端安全","description":"","frontmatter":{"title":"前端安全"},"headers":[{"level":2,"title":"CORS 跨源资源共享","slug":"cors-跨源资源共享"},{"level":3,"title":"预请求验证","slug":"预请求验证"},{"level":2,"title":"CSRF 跨站点请求伪造","slug":"csrf-跨站点请求伪造"},{"level":2,"title":"XSS 漏洞","slug":"xss-漏洞"},{"level":2,"title":"JSONP 的原理是什么？","slug":"jsonp-的原理是什么？"}],"relativePath":"guide/safety/README.md","lastUpdated":1625578115399}',a={},t=s('<h2 id="cors-跨源资源共享"><a class="header-anchor" href="#cors-跨源资源共享" aria-hidden="true">#</a> CORS 跨源资源共享</h2><p>跨源资源共享（CORS，Cross-Origin Resource Sharing）定义了浏览器与服务器如何实现跨源通信 允许服务器决定对那些资源提供服务 扩展了 HTTP 增加了一个新的 Origin 请求头 和一个新的 <code>Access-Control-Allow-Origin</code></p><div class="language-"><pre><code>origin: http://127.0.0.1:5500\n</code></pre></div><p>Access-Control-Allow-Origin: origin: <a href="http://127.0.0.1:5500" target="_blank" rel="noopener noreferrer">http://127.0.0.1:5500</a></p><div class="language-"><pre><code>Access-Control-Allow-Origin: http://www.nczonline.net\n\nAccess-Control-Max-Age: 1728000 // 最长时间：代表时间内不需要发送预请求（时间段内的操作是ok的）\n</code></pre></div><ul><li>请求是已经发送了的</li></ul><h3 id="预请求验证"><a class="header-anchor" href="#预请求验证" aria-hidden="true">#</a> 预请求验证</h3><ul><li><p>请求头的限制</p></li><li><p>获取服务端的认可</p></li></ul><div class="language-"><pre><code>Access-Control-Allow-Methods: POST, GET // 允许的方法\nAccess-Control-Allow-Headers: NCZ  // 允许的头\n</code></pre></div><p>浏览器的限制保证服务端的安全性</p><h2 id="csrf-跨站点请求伪造"><a class="header-anchor" href="#csrf-跨站点请求伪造" aria-hidden="true">#</a> CSRF 跨站点请求伪造</h2><p>在未授权系统可以访问某个资源时，可以将其视为跨站点请求伪造（CSRF，cross-site request forgery）攻击。未授权系统会按照处理请求的服务器的要求伪装自己。Ajax 应用程序，无论大小，都会受到 CSRF 攻击的影响，包括无害的漏洞验证攻击和恶意的数据盗窃或数据破坏攻击。</p><h2 id="xss-漏洞"><a class="header-anchor" href="#xss-漏洞" aria-hidden="true">#</a> XSS 漏洞</h2><p>跨站点脚本 是一种攻击的方式</p><h2 id="jsonp-的原理是什么？"><a class="header-anchor" href="#jsonp-的原理是什么？" aria-hidden="true">#</a> JSONP 的原理是什么？</h2><p>JSONP 是“JSON with padding”的简写，是在 Web 服务上流行的一种 JSON 变体。JSONP 看起来跟 JSON 一样，只是会被包在一个函数调用里 <strong>原理</strong>JSONP 调用是通过动态创建<code>&lt;script&gt;</code>元素并为 src 属性指定跨域 URL 实现的。此时的<code>&lt;script&gt;</code>与<code>&lt;img&gt;</code>元素类似，能够不受限制地从其他域加载资源。因为 JSONP 是有效的 JavaScript，所以 JSONP 响应在被加载完成之后会立即执行</p>',16);a.render=function(s,l,a,o,i,c){return e(),r("div",null,[t])};export default a;export{l as __pageData};
