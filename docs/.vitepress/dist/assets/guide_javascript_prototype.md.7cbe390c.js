import{o as n,c as s,a}from"./app.0c83b2b0.js";const t='{"title":"谈谈你对原型的理解？原型链解决的是什么问题","description":"","frontmatter":{"title":"谈谈你对原型的理解？原型链解决的是什么问题"},"headers":[{"level":2,"title":"原型","slug":"原型"},{"level":2,"title":"原型继承","slug":"原型继承"},{"level":2,"title":"[[Prototype]]","slug":"prototype"},{"level":2,"title":"__proto__ vs [[Prototype]]","slug":"proto-vs-prototype"},{"level":2,"title":"F.prototype","slug":"f-prototype"},{"level":2,"title":"constructor","slug":"constructor"},{"level":2,"title":"真题","slug":"真题"}],"relativePath":"guide/javascript/prototype.md","lastUpdated":1615877423025}',o={},p=a('<ul><li>prototype 和 <code>__proto__</code> 区别是什么？</li></ul><blockquote><h1 id="从对象的角度出发"><a class="header-anchor" href="#从对象的角度出发" aria-hidden="true">#</a> 从对象的角度出发</h1></blockquote><h2 id="原型"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><ul><li>原型是一个被谁引用的对象</li></ul><p>在 JavaScript 中，对象有一个特殊的隐藏属性 <code>[[Prototype]]</code>（如规范中所命名的），它要么为 <code>null</code>，要么就是对另一个对象的引用。该对象被称为“原型”。<strong>（被引用的对象）</strong></p><h2 id="原型继承"><a class="header-anchor" href="#原型继承" aria-hidden="true">#</a> 原型继承</h2><p>当我们从 <code>object</code> 中读取一个缺失的属性时，JavaScript 会自动从原型中获取该属性。在编程中，这种行为被称为“原型继承”</p><div class="language-js"><pre><code><span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;i am a obj&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>当访问对象的属性<code>name</code> 时，第一步是检查对象本身是否有这个属性，、</p><ul><li>如果有的话就使用它</li><li>但是如果 a 不在<code>myObj</code>中，就需要使用对象的 [[Prototype]] 链了</li></ul><h2 id="prototype"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> <code>[[Prototype]]</code></h2><ul><li>每个对象都会有个属性</li><li>内部隐藏</li><li>设置这个属性 <ul><li><code>__proto__</code> 可以是对象也可以是<code>null</code></li></ul></li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  eats<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jumps<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>eats<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n\nrabbit<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> animal\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>eats<span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><p><strong>在这儿我们可以说 &quot;<code>animal</code> 是 <code>rabbit</code> 的原型&quot;，或者说 &quot;<code>rabbit</code> 的原型是从 <code>animal</code> 继承而来的&quot;。</strong></p><div class="language-"><pre><code>myObj.foo = &#39;bar&#39;\n</code></pre></div><ul><li>myObject 对象中包含名为 foo 的普通数据访问属性，这条赋值语句只会修改已有的属 性值。</li><li>如果 foo 不是直接存在于 myObject 中，[[Prototype]] 链就会被遍历，类似 [[Get]] 操作。 如果原型链上找不到 foo，foo 就会被直接添加到 myObject 上。</li></ul><h2 id="proto-vs-prototype"><a class="header-anchor" href="#proto-vs-prototype" aria-hidden="true">#</a> <code>__proto__</code> vs <code>[[Prototype]]</code></h2><ul><li><p><code>__proto__</code> <strong>是</strong> <code>[[Prototype]]</code> <strong>的因历史原因而留下来的 getter/setter</strong></p><div class="language-js"><pre><code>\n<span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  eats<span class="token operator">:</span><span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> rabbit <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">,</span><span class="token punctuation">{</span>\n     jumps<span class="token operator">:</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><p><code>Object.getPrototypeOf</code></p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">)</span> <span class="token operator">===</span> animal <span class="token comment">// true</span>\n</code></pre></div></li><li><p><code>Object.setPrototypeOf</code></p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 rabbit 的原型修改为 {}</span>\n</code></pre></div></li></ul></li><li><p>[[Prototype]] 隐藏的属性</p></li></ul><blockquote><h1 id="从函数的角度出发"><a class="header-anchor" href="#从函数的角度出发" aria-hidden="true">#</a> 从函数的角度出发</h1></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token comment">// console.log(typeof Rabbit.prototype) object</span>\n</code></pre></div><p>当前的<code>Rabbit</code> 这个函数也是一个对象,对象就有属性，恰好有一个属性是 <code>prototype</code></p><p><strong>new操作符会把构造函数的prototype这个属性值设置为新对象的[[Prototype]]</strong></p><h2 id="f-prototype"><a class="header-anchor" href="#f-prototype" aria-hidden="true">#</a> <code>F.prototype</code></h2><p>构造函数的 <code>&quot;prototype&quot;</code> 属性自古以来就起作用</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">/* default prototype\nRabbit.prototype = { constructor: Rabbit };\n*/</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Rabbit</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Rabbit<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Rabbit</span><span class="token punctuation">.</span>constructor<span class="token operator">===</span>Rabbit<span class="token punctuation">)</span> <span class="token comment">// false</span>\n\n</code></pre></div><h2 id="constructor"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> <code>constructor</code></h2><p><strong>……JavaScript 自身并不能确保正确的 <code>&quot;constructor&quot;</code> 函数值</strong></p><h2 id="真题"><a class="header-anchor" href="#真题" aria-hidden="true">#</a> 真题</h2><div class="language-js"><pre><code> <span class="token comment">// 1 声明构造函数A</span>\n        <span class="token keyword">var</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> \n        <span class="token comment">// 2 A的常规属性prototype 指向一个 {} 空对象</span>\n            <span class="token comment">// new 出来的对象就会使用这个空对象作为原型引用</span>\n        <span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token comment">// 3 声明一个对象等价于 B = new Object()</span>\n        <span class="token keyword">var</span> <span class="token constant">B</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token comment">// 4 constructor存在于函数的默认prototype属性中</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>\n        <span class="token comment">// 5 F.prototype = {constructor:F} </span>\n            <span class="token comment">// 获取对象B的构造器</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>\n        <span class="token comment">// 6 a的原型引用是个空对象 a.__proto__ 本来是{constructor: ƒ} 现在变成{}</span>\n        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token comment">// 7 再次new 出来一个对象</span>\n        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n       <span class="token comment">// 8 构造器验证</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// Object()</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// Func()</span>\n       <span class="token comment">// 9 b的构造器指向 Function()</span>\n       b<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>constructor\n       <span class="token comment">// 10 输出a的构造器</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token operator">==</span><span class="token constant">A</span><span class="token punctuation">)</span> <span class="token comment">// false 因为  A.prototype = {}置为空对象了  本来是A构造出来的</span>\n       <span class="token comment">// 11 输入 a b 的构造器</span>\n    \n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">==</span> b<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// false</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// 对象了</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// 函数了  因为b.constructor = A.constructor</span>\n\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div>',30);o.render=function(a,t,o,c,e,l){return n(),s("div",null,[p])};export default o;export{t as __pageData};
