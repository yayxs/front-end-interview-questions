import{o as n,c as a,a as s}from"./app.78bcef79.js";const t='{"title":"computed,watch,methods 三者的应用场景与区别以及实现原理?","description":"","frontmatter":{"title":"computed,watch,methods 三者的应用场景与区别以及实现原理?"},"headers":[{"level":2,"title":"计算属性 computed","slug":"计算属性-computed"},{"level":2,"title":"方法 methods","slug":"方法-methods"},{"level":2,"title":"watch","slug":"watch"}],"relativePath":"guide/vue/computed_methods_watch.md","lastUpdated":1625578115400}',p={},o=s('<h2 id="计算属性-computed"><a class="header-anchor" href="#计算属性-computed" aria-hidden="true">#</a> 计算属性 computed</h2><p>计算属性是基于它们的响应式依赖进行缓存的,依赖的是<strong>响应式数据</strong> 一般的数据不行</p><ul><li>应用场景就是 计算一个值比较费劲</li><li>使用方法简单</li><li>缓存一定程度上可以提升性能</li></ul><h2 id="方法-methods"><a class="header-anchor" href="#方法-methods" aria-hidden="true">#</a> 方法 methods</h2><p>调用方法将总会再次执行函数。</p><h2 id="watch"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h2><p>Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个 property。一个对象，键是需要观察的表达式，值是对应回调函数 用于观察一个表达式或computed函数在Vue.js实例上的变化。回调函数调用时，会从参数得到新数据（new value）和旧数据（old value）。表达式只接受以点分隔的路径，例如a.b.c。如果是一个比较复杂的表达式，可以用函数代替表达式。</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  123 {{ $data }}\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; (a += 1)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      b<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      e<span class="token operator">:</span> <span class="token punctuation">{</span>\n        f<span class="token operator">:</span> <span class="token punctuation">{</span>\n          g<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      h<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 做点什么</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;new: %s, old: %s&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div><p>其中注意两个词</p><ul><li>immediate: true 一上来就会执行(在选项参数中指定immediate: true，将立即以表达式的当前值触发回调)</li></ul><div class="language-js"><pre><code></code></pre></div><p>&quot;obj.a&quot;: { handler(newName, oldName) { console.log(newName); console.log(oldName); }, immediate: true, },</p><div class="language-"><pre><code></code></pre></div><ul><li>deep 其中 deep 是深度监听 给对象的所有属性都增加监听器 ，但是性能开销大,当用户指定了 watch 中的 deep 属性为 true 时，如果当前监控的值是数组类型。会对对象中的每 一项进行求值，此时会将当前 watcher 存入到对应属性的依赖中，这样数组中对象发生变化时也 会通知数据更新(这里需要注意的是，监听数组的变动不需要这么做)</li></ul><div class="language-js"><pre><code> e<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;😄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;new: %s, old: %s&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      deep<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div>',15);p.render=function(s,t,p,e,c,u){return n(),a("div",null,[o])};export default p;export{t as __pageData};
